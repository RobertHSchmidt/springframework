                                               --------------------------
                                               Frequently Asked Questions
                                               --------------------------
                                               
Frequently Asked Questions

	Below are some questions that are frequently asked on the Spring-WS forum. 
	Please read this page before you ask a question on the forum.
	
* Java

** Does Spring-WS work under Java 1.4?

	Yes it does, but it requires some work. Java 1.4 is bundled with the older XML parser Crimson, which does not handle 
	namespaces correctly. Additionally, it is bundled with an older version of Xalan, which also has problems. 
	Unfortunately, placing newer versions of these on the class path does not override them.
	See {{{http://xml.apache.org/xalan-j/faq.html#faq-N100D6}this FAQ}} entry on the Xalan site, and also 
	{{{http://xerces.apache.org/xerces2-j/faq-general.html#faq-4}this entry}} on the Xerces site.
	
	The only solution that works is to add newer versions of Xerces and Xalan in the lib/endorsed directory of your JDK, 
	as explained in those FAQs.
	
** Why do the Spring-WS unit tests fail under Mac OS X?

	For some reason, Apple decided to include a Java 1.4 compatibility jar with their JDK 1.5. This jar includes the 
	XML parsers which were included in Java 1.4. No other JDK distribution does this, so it is unclear what the purpose
	of this compatibility jar is.
	
	The jar can be found at <<</System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/Classes/.compatibility/14compatibility.jar>>>. 
	You can safely remove or rename it, and the tests will run again.

* SAAJ

** What is SAAJ?
	
	SAAJ is the SOAP with Attachments API for Java. Previously, it has been part of JAXM, but it has been released as a
	seperate API as part of the {{{http://java.sun.com/webservices/jwsdp/index.jsp}Java Web Service Developer Pack}}, 
	and also as part of J2EE 1.4. SAAJ is generally known as the package <<<javax.xml.soap>>>.
	
** What version of SAAJ does my application server support?
	
	See below:
	
*--------------------+--------------+
| Application Server | SAAJ Version |
*--------------------+--------------+
| BEA WebLogic 8     | 1.1          |
| BEA WebLogic 9     | 1.2          |
| IBM WebSphere 6    | 1.2          |
| SUN Glassfish      | 1.3          |
*--------------------+--------------+

	Additionally, Java SE 6 includes SAAJ 1.3.

** I get a <<<java.lang.NoSuchMethodError: javax.xml.soap.MessageFactory.newInstance(Ljava/lang/String;)Ljavax/xml/soap/MessageFactory;>>>

	Like most J2EE libraries, SAAJ consists of two parts: the API that consists of interfaces (<<<saaj-api.jar>>>), 
	and the implementation (<<<saaj-impl.jar>>>).
	The stack trace is due to the fact that you are using a new version of the API (SAAJ 1.3), while your application
	server provides an earlier version of the implementation (SAAJ 1.2 or even 1.1). Spring-WS supports all three 
	versions of SAAJ (1.1 through 1.3), but things break when it sees the 1.3 API, while there is no 1.3 implementation.

	The solution therefore is quite simple: to remove the newer 1.3 version of the API, from the class path, and replace 
	it with the version supported by your application server.
	
* WSDL

** How do I retrieve the WSDL from a Service? The ?WSDL query parameter does not work.

	The ?WSDL is a way to get a WSDL of a class. In SWS, a service is generally not implemented as a single class, but 
	as a collection of endpoints.
	
	There are two ways to expose a WSDL:
	
	* Simply add the WSDL to the root of the WAR, and the file is served normally. This has the disadvantage that the
	"location" attribute in the WSDL is static, i.e. it does not necessarily reflect the host name of the server. That's
	why in the airline sample airline-servlet.xml, we define an WsdlDefinitionHandlerAdapterthere, which transforms the
	location.
	
	* Use the MessageDispatcherServlet, which is done is the echo sample. Every WsdlDefinition listed in the
	*-servlet.xml will be exposed under the bean name. So if you define a WsdlDefinition named <<<echo>>>, it will be
	exposed as <<<echo.wsdl>>>. (i.e. <<<http://localhost:8080/echo/echo.wsdl>>>).
