<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="common">
    <title>Shared components</title>
    <para>
        In this chapter, we will explore the the components which are shared between client- and server side 
        Spring-WS development. These interfaces and classes represent the building blocks of Spring-WS, so
        it's important to understand what they do, even if you do not use them directly.
    </para>
    <section id="web-service-messages">
        <title>Web service messages</title>
        <section id="web-service-message">
            <title><interfacename>WebServiceMessage</interfacename></title>
            <para>
                One of the core interfaces within Spring Web Services is the 
                <interfacename>WebServiceMessage</interfacename>. This interface represents a protocol agnostic XML
                message. The interface contains methods that provide access to the payload of the message, in the form
                of a <interfacename>javax.xml.transform.Source</interfacename> or a 
                <interfacename>javax.xml.transform.Result</interfacename>. <interfacename>Source</interfacename> and
                <interfacename>Result</interfacename> are tagging interfaces that represent an abstraction over XML
                input and output. Concrete implementations wrap various XML representations, as indicated in the table
                below.
                <informaltable>
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry>Source/Result implementation</entry>
                                <entry>Wraps XML representation</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <classname>javax.xml.transform.dom.DOMSource</classname>
                                </entry>
                                <entry>
                                    <interfacename>org.w3c.dom.Node</interfacename>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <classname>javax.xml.transform.dom.DOMResult</classname>
                                </entry>
                                <entry>
                                    <interfacename>org.w3c.dom.Node</interfacename>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <classname>javax.xml.transform.sax.SAXSource</classname>
                                </entry>
                                <entry>
                                    <classname>org.xml.sax.InputSource</classname>
                                    and
                                    <interfacename>org.xml.sax.XMLReader</interfacename>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <classname>javax.xml.transform.sax.SAXResult</classname>
                                </entry>
                                <entry>
                                    <interfacename>org.xml.sax.ContentHandler</interfacename>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <classname>javax.xml.transform.stream.StreamSource</classname>
                                </entry>
                                <entry>
                                    <classname>java.io.File</classname>, <classname>java.io.InputStream</classname>, or
                                    <classname>java.io.Reader</classname>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <classname>javax.xml.transform.stream.StreamResult</classname>
                                </entry>
                                <entry>
                                    <classname>java.io.File</classname>, <classname>java.io.OutputStream</classname>, or
                                    <classname>java.io.Writer</classname>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                In addition to reading from and writing to the payload, a Web service message can write itself to an
                output stream.
            </para>
        </section>
        <section id="soap-message">
            <title><interfacename>SoapMessage</interfacename></title>
            <para>
                The <interfacename>SoapMessage</interfacename> is an extension of 
                <interfacename>WebServiceMessage</interfacename>. It contains SOAP-specific methods, such as getting
                SOAP Headers, SOAP Faults, etc. Generally, your code should only not be dependent on 
                <interfacename>SoapMessage</interfacename>, because the content of the SOAP Body can be obtained via
                <methodname>getPayloadSource()</methodname> and <methodname>getPayloadResult()</methodname> in the 
                <interfacename>WebServiceMessage</interfacename>. Only when it is necessary to perform SOAP-specific 
                actions, such as adding a header, get an attachment, etc., should you need to cast 
                <interfacename>WebServiceMessage</interfacename> to <interfacename>SoapMessage</interfacename>.
            </para>
        </section>
        <section id="message-factories">
            <title>Message Factories</title>
            <para>
                Concrete message implementation are created by a 
                <interfacename>WebServiceMessageFactory</interfacename>. This factory can create an empty message, or
                read a message based on an input stream.
                There are two concrete implementations of <interfacename>WebServiceMessageFactory</interfacename>.
                One is based on SAAJ, the SOAP with Attachments API for Java, the other based on Axis 2's AXIOM, the 
                AXis Object Model.
            </para>
            <section>
                <title><classname>SaajSoapMessageFactory</classname></title>
                <para>
                    The <classname>SaajSoapMessageFactory</classname> uses the SOAP with Attachments API for Java to 
                    create <classname>SoapMessage</classname> implementations. SAAJ is part of J2EE 1.4, so it should be 
                    supported under most modern application servers. You wire up a 
                    <classname>SaajSoapMessageFactory</classname> like so:
    <programlisting><![CDATA[
<bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory" />]]></programlisting>
                </para>
                <note>
                    <para>
                        SAAJ is based on DOM, the Document Object Model. This means that all SOAP messages are 
                        stored in memory as a whole. For larger SOAP messages, this may not be very performant.
                        In that case, the <classname>AxiomSoapMessageFactory</classname> might be more applicable.
                    </para>
                </note>
            </section>
            <section>
                <title><classname>AxiomSoapMessageFactory</classname></title>
                <para>
                    The <classname>AxiomSoapMessageFactory</classname> uses the AXis 2 Object Model to create 
                    <interfacename>SoapMessage</interfacename> implementations. AXIOM is based on  StAX, the Streaming 
                    API for XML. StAX provides a pull-based mechanism for reading XML messages, which can be more 
                    efficient for larger messages.
                </para>
                <para>
                    To increase reading performance on the <classname>AxiomSoapMessageFactory</classname>, 
                    you can set the <property>payloadCaching</property> property to false (default is true).
                    This this will read the contents of the SOAP body directly from the stream. 
                    When this setting is enabled, the payload can only be read once.
                    This means that you have to make sure that any preprocessing of the message does not consume it.
                </para>
                <para>
                    You use the <classname>AxiomSoapMessageFactory</classname> as follows:
                    <programlisting><![CDATA[
<bean id="messageFactory" class="org.springframework.ws.soap.axiom.AxiomSoapMessageFactory">
    <property name="payloadCaching" value="true"/>
</bean>]]></programlisting>
                </para>                 
            </section>
        </section>
    </section>
</chapter>