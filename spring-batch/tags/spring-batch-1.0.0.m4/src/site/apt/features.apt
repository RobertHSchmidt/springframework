                                    ------
                                    Spring Batch Features
                                    ------
                                    Dave Syer
                                    ------
                                    July 2007

Spring Batch Features and Roadmap

* 1.0 Features

  The following features are supported by Spring Batch 1.0:

** Optimisation and Infrastructure

  * RepeatOperations: an abstraction for grouping repeated
  operations together and moving the iteration logic into the
  framework.
 
  * RetryOperations: an abstraction for automatic retry.

  * InputSource abstraction and implementations for flat files, xml
  streaming and simple database queries.

  * Flat files are supported with fixed length and delimited records
  (input and ouput).
  
  * Xml is supported through Xstream mapping between objects and Xml
  elements (input and ouput).

  * A database input source is provided that maps a row of a ResultSet
  identified by a simple (single column) primary key.

  * OutputSource abstraction and implementations for flat files and
  xml (the Sql case is just a regular Jdbc Dao).

  * InputSource and OutputSource implementations are generally
  Restartable and Skippable.  Skippable means that they can be asked by
  clients to mark items as skipped, and not provide or process them
  next time they arrive.

  * Complementary to InputSource and OutputSource is a higher-level
  abstraction layer with ItemProvider and ItemProcessor.  Some
  specialised concrete retry and repeat strategies have dependencies
  on ItemProvider and/or ItemProcessor.

** Core Domain

  * JobConfiguration is the root of the core domain - it is what most
  developers and operators will be happy to call a "job": a recipe for
  how to construct and run a JobInstance.

  * A JobConfiguration is composed of a list of StepConfigurations
  (sequential step model for job).

  * StepConfiguration is a wrapper for a "unit of work", otherwise
  known as a Tasklet (formerly Module).

  * JobExecutor is the entry point for launching a JobConfiguration.

  * StepExecutor is the corresponding point for a StepConfiguration.
  StepExecutor is the main strategy for different scaling,
  distribution and processing approaches.  The 1.0 release contains
  implementations for in-process execution (single VM).  See below.

** Job Execution and Management

  * A simple JobExecutorFacade to launch jobs.  Start a new one or
  restart one that has previously failed.  The facade can be used by a
  command-line or JMX launcher to take simple input parameters and
  convert them to the form required by the Core.

  * Persistence of job meta data for management and reporting
  purposes: job and step identifiers, commit counts, task counts,
  statistics (a human readable represenation of the state of the job -
  can be augmented by developers).

  * ItemProviderProcessorTasklet - uses an ItemProvider to obtain the
  next record to process, and hands it to an ItemProvider if it is not
  null.

  Developers are encouraged to use the ItemProviderProcessorTasklet
  rather than implementing their own, because this is the
  implementation that in future versions of Spring Batch will be able
  to adapt to different deployment architectures, and take advantage
  of automatic scaling up through distributed processing.

  * A StepExecutor (SimpleStepExecutor) that can run a
  StepConfiguration in the same process (VM).

  * Concurrent execution of chunks (a chunk is a batch of items
  processed in the same transaction) through the Spring TaskExecutor
  abstraction.

  * Additional StepExecutor implementation that is aware of whether
  its task is Recoverable - take recovery action on error.

  * Automatic retry of a chunk and recovery for items that have
  exhausted their retry count.

  * Translation of job execution result into an exit code for
  schedulers running the job as an OS process.

** Samples

  * A range of samples is available as a separate module.  They all
  use a common simple configuration and extend in various ways to show
  the different features of the Execution module.

** Partial Support or Potentially Unstable APIs

  A milestone is a milestone, so we are going to continue refining the
  APIs until we get to a release candidate.  Hopefully most of the
  developer touch points are functionally pretty stable, even if the
  names and packages might still change.  Partial implementations or
  areas currently known to be undergoing refactoring
  are listed in JIRA
  (http://opensource.atlassian.com/projects/spring/browse/BATCH) for
  items marked as open for future versions.

  Documentation is extensive but still incomplete.  The recent
  refactoring to create the Execution module is not yet reflected, so
  the "container" concept is still ubiquitous.

* Roadmap (Beyond 1.0).

  * Remote or distributed execution of steps.  The step has to be
  partitioned and the partition information passed on to the remote
  processes to avoid double counting.  The remote execution might be
  in an EJB or other RPC like a web service.

  * Asynchronous pipeline processing - steps execute concurrently and
  optionally in separate processes.  Feedback loop between consumers
  and producers to prevent overflows.

  * Issue tracking - a job is not finished until all issues with its
  executions are resolved.  Spring Batch can provide hooks to
  integrate with internal issue tracking systems so that the lifetime
  of a job can be properly managed.

  * Auditing.  Implement hooks to monitor not only what jobs execute
  and the result of the execution (as per 1.0 possibly with some
  richer options for detailed outcome reports), but also who has
  executed the job, what changes they made to runtime parameters.

  * OSGi support.  Deploy the Spring Batch framework as an OSGi
  service.  Deploy individual jobs or groups of jobs as additional
  bundles that depend on the core.

* No Plans Yet to Support

  * Triggering.
