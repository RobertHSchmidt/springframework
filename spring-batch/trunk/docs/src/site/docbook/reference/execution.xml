<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="execution">
	<title>The Batch Execution Environment</title>

	<section>
		<title>Introduction</title>

		<para>
			The "execution" layer is fertile ground for collaboration and contributions from the community and from
			projects in the field. There is lifecycle support for starting and stopping jobs. The vision for this is
			that there can be multiple implementations of this interface providing different architectural patterns, and
			delivering different levels of scalability and robustness, without changing either the business logic or the
			job configuration. The 1.0 release of Spring Batch has an implementation of the core API that is targeted at
			a single VM.
		</para>

		<para>
			The execution environment is responsible for providing implementations of the core domain concepts. This
			includes:
		</para>
		<itemizedlist>
			<listitem>
				<para>Run Tier - Implement the bootstrapping and launching of the Execution Environment.</para>
			</listitem>

			<listitem>
				<para>Job Tier - Implement the Job and Step strategies.</para>
			</listitem>

			<listitem>
				<para>Application Tier - Implement the ItemReader and ItemWriter (or Tasklet) strategies.</para>
			</listitem>

			<listitem>
				<para>
					Data Tier - Implement a Repository solution for storing the persistence state of the batch domain.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			We will describe the flow of the simple batch execution envrionment that is provided with spring-batch to
			clarify the sequence of processing in the batch environment. The simple batch execution environment is a
			concrete implementation of the core interfaces. The flow of a job through the execution environment is as
			follows.
		</para>
		<orderedlist>
			<listitem>
				<para>
					In the Run Tier, a single Java Project may have one or more Jobs. Jobs are configured with the Job
					bean.
				</para>
			</listitem>

			<listitem>
				<para>
					A single Job must contain at least one Step. Steps are configured with various flavours of Step
					FactoryBean. If more than one step is configured for a Job, then they are executed serially and
					after the previous step (all of its items / records) is complete. A Job is also responsible for
					providing registered JobListener instances with callbacks before and after the job execution.
				</para>
			</listitem>

			<listitem>
				<para>
					Steps are responsible for executing business logic and recording progress in a StepExecution.
				</para>
			</listitem>

			<listitem>
				<para>
					Steps are also responsible for managing the lifecycle of ItemStreams that contribute input or output
					to the business logic. ItemStreams can be registered with a Step using the factory beans. Any
					ItemReader or ItemWRiter injected directly into the factory bean will also be registered
					automatically.
				</para>
			</listitem>

			<listitem>
				<para>
					Steps are also responsible for providing callbacks to the BatchListener family of listeners. These
					provide a way for application developers to add additional behaviour to a step, e.g. if a checksum
					or footer has to be added to an output file.
				</para>
			</listitem>

		</orderedlist>
	</section>

	<section>
		<title>Simple Batch Execution Environment</title>
		<para></para>
	</section>

	<section>
		<title>Configuration</title>
		<para>
			<programlisting>
        &lt;property name="itemProvider"&gt;
                &lt;bean class="org.springframework.batch.sample.item.provider.PlayerItemProvider"&gt;
                        &lt;property name="inputSource" ref="playerFileInputSource" /&gt;
                        &lt;property name="fieldSetMapper"&gt;
                                &lt;bean class="org.springframework.batch.sample.mapping.PlayerMapper" /&gt;
                        &lt;/property&gt;
                &lt;/bean&gt;
        &lt;/property&gt;
        </programlisting>
      </para>

      <para>The LineTokenizer is just one additional property to the
      InputSource as seen here:</para>

      <para>
        <programlisting>
                &lt;property name="tokenizer"&gt;
                        &lt;bean
                                class="org.springframework.batch.io.file.support.transform.DelimitedLineTokenizer"&gt;
                                &lt;property name="names"
                                        value="ID,lastName,firstName,position,birthYear,debutYear" /&gt;
                        &lt;/bean&gt;
                &lt;/property&gt;
        </programlisting>
      </para>
     
    </section>

</chapter>
