<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<appendix>
  <title>List of ItemReaders</title>

  <section>
    <title>Item Readers</title>

    <table>
      <title>Available Item Readers</title>

      <tgroup cols="3">
        <colspec align="center" />

        <thead>
          <row>
            <entry align="center">Item Reader</entry>

            <entry align="center">Type of Item Provided</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry align="left">AbstractBufferedItemReaderItemStream</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Abstract base class that provides bufferring
            functionality for any subclass.</entry>
          </row>

          <row>
            <entry align="left">ListItemReader</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Provides the items from a list, one at a
            time</entry>
          </row>

          <row>
            <entry align="left">ValidatingItemReader</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">A simple extension of DelegatingItemReader
            that provides for validation before returning input.</entry>
          </row>

          <row>
            <entry align="left">ItemReaderAdapter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Adapts any class to the
            <classname>ItemReader</classname> interface.</entry>
          </row>

          <row>
            <entry align="left">AggregateItemReader</entry>

            <entry align="left">java.util.Collection</entry>

            <entry align="left">An ItemReader that delivers a list as its
            item, storing up objects from the injected ItemReader until they
            are ready to be packed out as a collection. This ItemReader should
            mark the beginning and end of records with the constant values in
            FieldSetMapper AggregateItemReader#<emphasis
            role="bold">BEGIN_RECORD</emphasis> and
            AggregateItemReader#<emphasis
            role="bold">END_RECORD</emphasis></entry>
          </row>

          <row>
            <entry align="left">DelegatingItemReader</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Extends AbstractMethodInvokingDelegator, which
            enables dynamically calling of a custom method of the injected
            object. Provides a convenient API for dynamic method invocation
            shielding subclasses from the low-level details and exception
            handling.</entry>
          </row>

          <row>
            <entry align="left">FlatFileItemReader</entry>

            <entry align="left">java.lang.String</entry>

            <entry align="left">Reads from a flat file, includes ItemStream
            and Skippable functionality. See section on Read from a
            File</entry>
          </row>

          <row>
            <entry align="left">StaxEventItemReader</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Reads via StAX. See HOWTO - Read from a
            File</entry>
          </row>

          <row>
            <entry align="left">JdbcCursorItemReader</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Reads from a database cursor via JDBC. See
            HOWTO - Read from a Database</entry>
          </row>

          <row>
            <entry align="left">DrivingQueryItemReader</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Base class for operations that read from a
            database based on a single driving query. Configured by injecting
            a KeyGenerator object. See HOWTO - Read from a Database</entry>
          </row>

          <row>
            <entry align="left">HibernateCursorItemReader</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Reads from a cursor based on an HQL query. See
            section on Reading from a Database</entry>
          </row>

          <row>
            <entry align="left">IbatisDrivingQueryItemReader</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Reads via iBATIS based on a driving query. See
            HOWTO - Read from a Database</entry>
          </row>

          <row>
            <entry align="left">JmsItemReader</entry>

            <entry align="left">javax.jms.Message</entry>

            <entry align="left">Given a Spring JmsOperations object and a JMS
            Destination or destination name to send errors, provides items
            received through the injected JmsOperations receive()
            method</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section>
    <title>Item Writers</title>

    <table>
      <title>Available Item Writers</title>

      <tgroup cols="3">
        <colspec align="center" />

        <thead>
          <row>
            <entry align="center">Item Writer</entry>

            <entry align="center">Type of Item Written</entry>

            <entry align="center">Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry align="left">AbstractItemStreamItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Abstract base class that combines the
            <classname>ItemStream</classname> and
            <classname>ItemWriter</classname> interfaces.</entry>
          </row>

          <row>
            <entry align="left">AbstractItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Abstract base class of the
            <classname>ItemWriter</classname> interface with default
            implmentations of the <methodname>flush</methodname> and
            <methodname>clear</methodname> methods.</entry>
          </row>

          <row>
            <entry align="left">BatchSqlUpdateItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left"><classname>ItemWriter</classname> that uses
            batching freatures from a <classname>PreparedStatement</classname>
            if available and can take rudimentary steps to locate a failure
            during a <methodname>flush</methodname>.</entry>
          </row>

          <row>
            <entry align="left">CompositeItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Passes an item to the process method of each
            in an injected <emphasis role="bold">List</emphasis> of <emphasis
            role="bold">ItemWriter</emphasis> objects</entry>
          </row>

          <row>
            <entry align="left">DelegatingItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Wraps ItemWriter and is BeanAware allowing it
            to respond to Spring Bean events like
            afterPropertiesSet().</entry>
          </row>

          <row>
            <entry align="left">ItemWriterAdapter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Adapts any class to the
            <classname>ItemWriter</classname> interface.</entry>
          </row>

          <row>
            <entry align="left">PropertyExtractingDelegatingItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Extends AbstractMethodInvokingDelegator
            creating arguments on the fly. Arguments are created by retrieving
            the values from the fields in the item to be processed (via a
            SpringBeanWrapper) based on an injected array of field
            name</entry>
          </row>

          <row>
            <entry align="left">ItemTransformerItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Extends <emphasis
            role="bold">DelegatingItemWriter</emphasis> by defining its
            <emphasis role="bold">doProcess</emphasis> method to call an
            injected <emphasis role="bold">ItemTransformer</emphasis></entry>
          </row>

          <row>
            <entry align="left">FlatFileItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Attempts to convert the item to a <emphasis
            role="bold">String</emphasis>, <emphasis
            role="bold">Collection</emphasis> or array using an injected
            <emphasis role="bold">Coverter</emphasis> and then recurses. See
            [HOWTO - Write to a File]</entry>
          </row>

          <row>
            <entry align="left">HibernateAwareItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">This item writer is hibernate session aware
            and handles some transaction-related work that a non-"hibernate
            aware" item writer would not need to know about and then delegates
            to another item writer to do the actual writing. See [HOWTO -
            Write to a Database]</entry>
          </row>

          <row>
            <entry align="left">StaxEventWriterItemWriter</entry>

            <entry align="left">java.lang.Object</entry>

            <entry align="left">Uses an <emphasis
            role="bold">ObjectToXmlSerializer</emphasis> implementation to
            convert each item to XML and then writes it to an XML file using
            StAX. See [HOWTO - Write to a File]</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
</appendix>