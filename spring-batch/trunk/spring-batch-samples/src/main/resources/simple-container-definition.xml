<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<import resource="data-source-context.xml" />

	<bean id="jobConfigurationRegistryBeanPostProcessor"
		class="org.springframework.batch.execution.configuration.JobRegistryBeanPostProcessor">
		<property name="jobConfigurationRegistry"
			ref="jobConfigurationRegistry" />
	</bean>

	<bean id="jobLauncher"
		class="org.springframework.batch.execution.launch.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean id="jobConfigurationRegistry"
		class="org.springframework.batch.execution.configuration.MapJobRegistry" />

	<aop:config>
		<aop:advisor
			pointcut="execution(* org.springframework.batch.execution..*Repository+.*(..))"
			advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*Create*" propagation="REQUIRES_NEW"
				isolation="SERIALIZABLE" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<bean id="jobRepository"
		class="org.springframework.batch.execution.repository.SimpleJobRepository">
		<constructor-arg ref="jobInstanceDao" />
		<constructor-arg ref="jobExecutionDao" />
		<constructor-arg ref="stepExecutionDao" />
	</bean>

	<bean id="jobInstanceDao" lazy-init="true"
		class="org.springframework.batch.execution.repository.dao.JdbcJobInstanceDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
		<property name="jobIncrementer" ref="jobIncrementer" />
	</bean>

	<bean id="jobExecutionDao" lazy-init="true"
		class="org.springframework.batch.execution.repository.dao.JdbcJobExecutionDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
		<property name="jobExecutionIncrementer"
			ref="jobExecutionIncrementer" />
	</bean>

	<bean id="stepExecutionDao" lazy-init="true"
		class="org.springframework.batch.execution.repository.dao.JdbcStepExecutionDao">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
		<property name="stepExecutionIncrementer"
			ref="stepExecutionIncrementer" />
	</bean>

	<bean id="mapJobInstanceDao" lazy-init="true"
		class="org.springframework.batch.execution.repository.dao.MapJobInstanceDao" />
		
	<bean id="mapJobExecutionDao" lazy-init="true"
		class="org.springframework.batch.execution.repository.dao.MapJobExecutionDao" />

	<bean id="mapStepExecutionDao" lazy-init="true"
		class="org.springframework.batch.execution.repository.dao.MapStepExecutionDao" />

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="simpleJob"
		class="org.springframework.batch.execution.job.SimpleJob"
		abstract="true">
		<property name="jobRepository" ref="jobRepository" />
		<property name="restartable" value="true" />
	</bean>

	<bean id="taskletStep"
		class="org.springframework.batch.execution.step.TaskletStep"
		abstract="true">
		<property name="jobRepository" ref="jobRepository" />
		<property name="allowStartIfComplete" value="true" />
	</bean>

	<bean id="simpleStep"
		class="org.springframework.batch.execution.step.ItemOrientedStep"
		abstract="true">
		
		<property name="transactionManager" ref="transactionManager" />
		<property name="jobRepository" ref="jobRepository" />
		<property name="startLimit" value="100"/>

		<property name="exceptionHandler">
			<bean
				class="org.springframework.batch.repeat.exception.handler.SimpleLimitExceptionHandler">
				<property name="limit" value="5" />
				<property name="useParent" value="true" />
			</bean>
		</property>

		<property name="commitInterval" value="1" />

	</bean>

	<bean id="customEditorConfigurer"
		class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="int[]">
					<bean
						class="org.springframework.batch.support.IntArrayPropertyEditor" />
				</entry>
				<entry
					key="org.springframework.batch.io.file.transform.Range[]">
					<bean
						class="org.springframework.batch.io.file.transform.RangeArrayPropertyEditor" />
				</entry>
				<entry key="java.util.Date">
					<bean
						class="org.springframework.beans.propertyeditors.CustomDateEditor">
						<constructor-arg>
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg value="yyyyMMdd" />
							</bean>
						</constructor-arg>
						<constructor-arg value="false" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>

	<bean id="logAdvice"
		class="org.springframework.batch.sample.advice.ProcessorLogAdvice" />

	<bean id="eventAdvice"
		class="org.springframework.batch.sample.advice.MethodExecutionApplicationEventAdvice" />

	<aop:config>
		<aop:aspect ref="logAdvice">
			<aop:after
				pointcut="execution( * org.springframework.batch.sample..InfiniteLoopTasklet+.execute(..))"
				method="doBasicLogging" />
		</aop:aspect>
		<aop:aspect ref="eventAdvice">
			<aop:before
				pointcut="execution( * org.springframework.batch..Step+.execute(..))"
				method="before" />
			<aop:after
				pointcut="execution( * org.springframework.batch..Step+.execute(..))"
				method="after" />
			<aop:after-throwing throwing="t" 
				pointcut="execution( * org.springframework.batch..Step+.execute(..))"
				method="onError" />
		</aop:aspect>
	</aop:config>

</beans>
